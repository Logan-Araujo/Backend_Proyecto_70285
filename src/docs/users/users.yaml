paths:
 /api/users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/User"
        "500":
          description: Internal server error
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/createUser"
      responses:
        "201":
          description: User created
        "500":
          description: Bad request
 /api/users/{uid}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
      - name: uid
        in: path
        required: true
        description: Id of the user
        schema:
          type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
              type: array
              items:
                $ref: "#components/schemas/User"
        "500":
          description: Invalid
    put:
      summary: Update a user by ID
      tags:
        - Users
      parameters:
      - name:
        in: path
        required: true
        description: ID of the user to update
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/updateUser"
      responses:
        "200":
          description: User updated
        "404":
          description: User not found
        "500":
          description: Internal server error
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID automatically generated by mongodb
        first_name:
          type: string
          description: First name of the user
        last_name:
          type: string
          description: Last name of the user
        password:
          type: string
          description: Password of the user
      example:
        _id: ObjectId("12345")
        first_name: John
        last_name: Doe
        password: 1234
  requestBodies:
    createUser:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the user
        last_name:
          type: string
          description: The last name of the user
        password:
          type: string
          description: The password of the user
        email:
          type: string
          description: The email of the user
      example:
        first_name: Nero
        last_name: Sparda
        password: 1234
        email: nero@example.com
    updateUser:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the user
        last_name:
          type: string
          description: The last name of the user
        password:
          type: string
          description: The password of the user
        email:
          type: string
          description: The email of the user
      example:
        first_name: Lady
        last_name: Arkham
        password: 1234
        email: lady@example.com
